Goroutines 
- goroutines is a lightweight thread managed by the GO runtime 
    - ex: go f(x, y, z) // starts a go routine for f(x, y, z)
    - evaluation of f() x, y, z happens in current goroutine and execution of f happens in new goroutine 
- runs in same address space, so access to shared mem must be synchronized 
    - sync package provides useful primitives. 
ex:
    package main 

    import (
        "fmt"
        "time"
    )

    func say (s string) {
        for i := 0; i < 5; i++ {
            time.Sleep(100 * time.Millisecond)
            fmt.Println(s)
        }
    }

Channels 
- channels are a typed conduit through which you can send and receive values with channel operator '<-'
    - ex:
        ch <- v //send v to channel ch
        v := <-ch // receive from ch, and assign value to v 
    - data flow is directed by arrow 
- channels must be created before used 
    - ex: ch := make(chan T) // T is a type 
ex:
    package main 

    import "fmt"

    func sum(s []int, c chan int){
        sum := 0
        for _, v := range s {
            sum += v
        }
        c <- sum // send sum to c 
    }

    func main() {
        s := []int{7, 2, 8, -9, 4, 0}
        c := make(chan int) 
        go sum(s[:len(s)/2], c)
        go sum(s[len(s)/2:], c)
        x, y := <-c, <-c // recieve from c 
        fmt.Println(x, y, x+y)
    }

Buffered Channels 
- channels can be buffered 
    - ex: ch := make(chan int, 100) 
- if buffer is full then it will override the first in value     

Range and Close 
- sender can close a channel to indicate that no more vlaues will be sent 
- receiver can test whether a channel has been closed
    - ex: v, ok := <- ch // if ok is false then channel is closed 
ex:
    package main 

    import "fmt"

    func fibonacci(n int, c chan int) {
        x, y := 0, 1
        for i := 0; i < n; i++{
            c <- x
            x, y = y, x+y
        }
        close(c)
    }

    func main() {
        c := make(chan int, 10)
        go fibonacci(cap(c), c)
        for i := range c {
            fmt.Println(i)
        }
    }

Select 
- lets goroutine wait on multiple communication operations 
- blocks until one of its case can run
- executes random if multiple case are ready 
- default selection case is ran when nothing else is ready 
ex:
    package main 

    import "fmt"

    func fibonacci(c, quit chan int) {
        x, y := 0, 1
        for {
            select {
                case c <- x:
                    x, y = y, x+y 
                case <- quit:
                    fmt.Println("quit")
                    return
            }
        }
    }

    func main() {
        c := make(chan int)
        quit := make(chan int) 
        go func() {
            for i := 0; i < 10; i++ {
                fmt.Println(<-c)
            }
            quit <- 0
        }() 
        fibonacci(c, quit)
    }