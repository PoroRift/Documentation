For
- go has only one looping construct, the for loop 
- basic for loop has three components separated by semicolons: 
    - init statement: before iteration (optional)
    - evaluation experssion: before every iteration
    - post statement: end of every iteration (optional)

    ex:
        package main 

        import "fmt"

        func main() {
            sum := 0
            for i := 0; i < 10; i++ {
                sum += i
            }
            // the init and post are optional 
            for sum < 100 {
                sum += 1
            }
            fmt.Println(sum)
        }

While
- a while loop in go is just a for loop without the init and post statements 

For Forever
- a for loop doesn't need an evaluation expression either it can run forever 

If 
- if statements are not surrounded with parentheses
- can start with a short statement to execute before the condition
    - variables made in these short statement only live until the end of the if statement 
    - variables, however, can live inside any of the else blocks 
    
    ex: 
        package main 
        
        import(
            "fmt"
            "math"
        )

        func pow(x, n, lim float64) float64 {
            if v := math.Pow(x, n); v < lim {
                return v 
            } else {
                fmt.Printf("%g >= %g", v, lim)
            }
            return lim 
        }

        func main() {
            fmt.Println(
                pow(3, 2, 10),
                pow(3, 3, 20)
            )
        }

Switch 
- switch statements are another way to write a sequence of if - else statements 
- no need break statements in go's switch statement 
- evaluates case from top to bottom, stopping when a case succeeds 
- switch without a condition is like a switch true, 
    - easy way to avoid long if, else cases 

    ex: 

        package main 

        import (
            "fmt"
        )

        func main() {
            i := 0
            switch i {
                case 0:
                    // do something 
                case 1:
                    // do something 
                default:
                    // do something 
            }

            v := 1
            switch {
                case v < 0:
                    // do something 
                case v > 0:
                    // do something 
            }
        }

Defer 
- defer statemnet defers the execution of a function until the surrounding function returns
- they are evaluated immediately, but not executed until the surrounding function returns
- deferred function calls are pushed onto a stack (last in first out) 
    ex:
        package main 
        
        import "fmt"

        func main() {
            defer fmt.Println("!")
            defer fmt.Println("world")
            fmt.Println("hello")
        }

